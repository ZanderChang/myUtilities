digraph "CFG for '_Z28__sanitizer_cov_trace_switchmPm' function" {
	label="CFG for '_Z28__sanitizer_cov_trace_switchmPm' function";

	Node0x5a58450 [shape=record,label="{entry:\l  %type.addr.i18 = alloca i8*, align 8\l  %PC.addr.i19 = alloca i64, align 8\l  %Arg1.addr.i20 = alloca i64, align 8\l  %Arg2.addr.i21 = alloca i64, align 8\l  %type.addr.i13 = alloca i8*, align 8\l  %PC.addr.i14 = alloca i64, align 8\l  %Arg1.addr.i15 = alloca i32, align 4\l  %Arg2.addr.i16 = alloca i32, align 4\l  %type.addr.i = alloca i8*, align 8\l  %PC.addr.i = alloca i64, align 8\l  %Arg1.addr.i = alloca i16, align 2\l  %Arg2.addr.i = alloca i16, align 2\l  %Val.addr = alloca i64, align 8\l  %Cases.addr = alloca i64*, align 8\l  %N = alloca i64, align 8\l  %ValSizeInBits = alloca i64, align 8\l  %Vals = alloca i64*, align 8\l  %PC = alloca i64, align 8\l  %i = alloca i64, align 8\l  %Token = alloca i64, align 8\l  store i64 %Val, i64* %Val.addr, align 8\l  store i64* %Cases, i64** %Cases.addr, align 8\l  %0 = load i64*, i64** %Cases.addr, align 8\l  %arrayidx = getelementptr inbounds i64, i64* %0, i64 0\l  %1 = load i64, i64* %arrayidx, align 8\l  store i64 %1, i64* %N, align 8\l  %2 = load i64*, i64** %Cases.addr, align 8\l  %arrayidx1 = getelementptr inbounds i64, i64* %2, i64 1\l  %3 = load i64, i64* %arrayidx1, align 8\l  store i64 %3, i64* %ValSizeInBits, align 8\l  %4 = load i64*, i64** %Cases.addr, align 8\l  %add.ptr = getelementptr inbounds i64, i64* %4, i64 2\l  store i64* %add.ptr, i64** %Vals, align 8\l  %5 = call i8* @llvm.returnaddress(i32 0)\l  %6 = ptrtoint i8* %5 to i64\l  store i64 %6, i64* %PC, align 8\l  store i64 0, i64* %Token, align 8\l  store i64 0, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5a58450 -> Node0x5a59b70;
	Node0x5a59b70 [shape=record,label="{for.cond:                                         \l  %7 = load i64, i64* %i, align 8\l  %8 = load i64, i64* %N, align 8\l  %cmp = icmp ult i64 %7, %8\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x5a59b70:s0 -> Node0x5a59de0;
	Node0x5a59b70:s1 -> Node0x5a59e60;
	Node0x5a59de0 [shape=record,label="{for.body:                                         \l  %9 = load i64, i64* %ValSizeInBits, align 8\l  %cmp2 = icmp eq i64 %9, 16\l  br i1 %cmp2, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x5a59de0:s0 -> Node0x5a5a080;
	Node0x5a59de0:s1 -> Node0x5a5a150;
	Node0x5a5a080 [shape=record,label="{if.then:                                          \l  %10 = load i64, i64* %PC, align 8\l  %11 = load i64, i64* %i, align 8\l  %add = add i64 %10, %11\l  %12 = load i64*, i64** %Vals, align 8\l  %13 = load i64, i64* %i, align 8\l  %arrayidx3 = getelementptr inbounds i64, i64* %12, i64 %13\l  %14 = load i64, i64* %arrayidx3, align 8\l  %conv = trunc i64 %14 to i16\l  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32\l... 0), i8** %type.addr.i, align 8\l  store i64 %add, i64* %PC.addr.i, align 8\l  store i16 %conv, i16* %Arg1.addr.i, align 2\l  store i16 0, i16* %Arg2.addr.i, align 2\l  %15 = load i8*, i8** %type.addr.i, align 8\l  %16 = load i64, i64* %PC.addr.i, align 8\l  %17 = load i16, i16* %Arg1.addr.i, align 2\l  %conv.i = zext i16 %17 to i32\l  %18 = load i16, i16* %Arg2.addr.i, align 2\l  %conv1.i = zext i16 %18 to i32\l  %call.i = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8],\l... [23 x i8]* @.str.6, i32 0, i32 0), i8* %15, i64 %16, i32 %conv.i, i32\l... %conv1.i)\l  br label %if.end12\l}"];
	Node0x5a5a080 -> Node0x5a5ad00;
	Node0x5a5a150 [shape=record,label="{if.else:                                          \l  %19 = load i64, i64* %ValSizeInBits, align 8\l  %cmp4 = icmp eq i64 %19, 32\l  br i1 %cmp4, label %if.then5, label %if.else9\l|{<s0>T|<s1>F}}"];
	Node0x5a5a150:s0 -> Node0x5a5aed0;
	Node0x5a5a150:s1 -> Node0x5a5afb0;
	Node0x5a5aed0 [shape=record,label="{if.then5:                                         \l  %20 = load i64, i64* %PC, align 8\l  %21 = load i64, i64* %i, align 8\l  %add6 = add i64 %20, %21\l  %22 = load i64*, i64** %Vals, align 8\l  %23 = load i64, i64* %i, align 8\l  %arrayidx7 = getelementptr inbounds i64, i64* %22, i64 %23\l  %24 = load i64, i64* %arrayidx7, align 8\l  %conv8 = trunc i64 %24 to i32\l  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32\l... 0), i8** %type.addr.i13, align 8\l  store i64 %add6, i64* %PC.addr.i14, align 8\l  store i32 %conv8, i32* %Arg1.addr.i15, align 4\l  store i32 0, i32* %Arg2.addr.i16, align 4\l  %25 = load i8*, i8** %type.addr.i13, align 8\l  %26 = load i64, i64* %PC.addr.i14, align 8\l  %27 = load i32, i32* %Arg1.addr.i15, align 4\l  %28 = load i32, i32* %Arg2.addr.i16, align 4\l  %call.i17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x\l... i8], [23 x i8]* @.str.6, i32 0, i32 0), i8* %25, i64 %26, i32 %27, i32 %28)\l  br label %if.end\l}"];
	Node0x5a5aed0 -> Node0x5a5b9e0;
	Node0x5a5afb0 [shape=record,label="{if.else9:                                         \l  %29 = load i64, i64* %PC, align 8\l  %30 = load i64, i64* %i, align 8\l  %add10 = add i64 %29, %30\l  %31 = load i64*, i64** %Vals, align 8\l  %32 = load i64, i64* %i, align 8\l  %arrayidx11 = getelementptr inbounds i64, i64* %31, i64 %32\l  %33 = load i64, i64* %arrayidx11, align 8\l  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32\l... 0), i8** %type.addr.i18, align 8\l  store i64 %add10, i64* %PC.addr.i19, align 8\l  store i64 %33, i64* %Arg1.addr.i20, align 8\l  store i64 0, i64* %Arg2.addr.i21, align 8\l  %34 = load i8*, i8** %type.addr.i18, align 8\l  %35 = load i64, i64* %PC.addr.i19, align 8\l  %36 = load i64, i64* %Arg1.addr.i20, align 8\l  %37 = load i64, i64* %Arg2.addr.i21, align 8\l  %call.i22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x\l... i8], [23 x i8]* @.str.6, i32 0, i32 0), i8* %34, i64 %35, i64 %36, i64 %37)\l  br label %if.end\l}"];
	Node0x5a5afb0 -> Node0x5a5b9e0;
	Node0x5a5b9e0 [shape=record,label="{if.end:                                           \l  br label %if.end12\l}"];
	Node0x5a5b9e0 -> Node0x5a5ad00;
	Node0x5a5ad00 [shape=record,label="{if.end12:                                         \l  br label %for.inc\l}"];
	Node0x5a5ad00 -> Node0x5a5c790;
	Node0x5a5c790 [shape=record,label="{for.inc:                                          \l  %38 = load i64, i64* %i, align 8\l  %inc = add i64 %38, 1\l  store i64 %inc, i64* %i, align 8\l  br label %for.cond\l}"];
	Node0x5a5c790 -> Node0x5a59b70;
	Node0x5a59e60 [shape=record,label="{for.end:                                          \l  ret void\l}"];
}
